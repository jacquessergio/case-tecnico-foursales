package com.foursales.ecommerce.dto;

import com.foursales.ecommerce.enums.OrderStatus;
import io.swagger.v3.oas.annotations.media.Schema;
import lombok.Builder;
import lombok.Getter;

import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.util.List;
import java.util.UUID;

/**
 * Order response DTO with Builder pattern
 * Immutable to prevent accidental modifications
 */
@Getter
@Builder
@Schema(description = "Response containing order data")
public class OrderResponse {

    @Schema(description = "Unique order ID automatically generated by the system", example = "a1b2c3d4-e5f6-7890-abcd-ef1234567890")
    private UUID id;

    @Schema(description = "ID of the user who placed the order", example = "b2c3d4e5-f6a7-8901-bcde-f12345678901")
    private UUID userId;

    @Schema(description = "Name of the user who placed the order", example = "Jo√£o Silva")
    private String userName;

    @Schema(description = "Email of the user who placed the order", example = "joao.silva@example.com")
    private String userEmail;

    @Schema(description = "Total order value calculated automatically based on items", example = "7249.98")
    private BigDecimal totalValue;

    @Schema(description = "Current order status in the processing flow. PENDENTE: awaiting payment; PAGO: payment confirmed and stock reduced; CANCELADO: order cancelled due to insufficient stock or other reason", example = "PENDENTE", allowableValues = {
            "PENDENTE", "PAGO", "CANCELADO" })
    private OrderStatus status;

    @Schema(description = "Order creation date and time (automatically generated)", example = "2025-01-15T10:23:45")
    private LocalDateTime createdAt;

    @Schema(description = "Last update date and time (automatically updated)", example = "2025-01-15T14:37:22")
    private LocalDateTime updatedAt;

    @Schema(description = "Date and time when payment was confirmed (null if not yet paid)", example = "2025-01-15T14:37:22", nullable = true)
    private LocalDateTime paymentDate;

    @Schema(description = "List of items included in this order with their quantities and prices")
    private List<OrderItemResponse> items;
}
